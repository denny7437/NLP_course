#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –æ–±—É—á–µ–Ω–∏—è ModernBERT –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞
–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
python scripts/train_modernbert.py --config-file config.json
–∏–ª–∏ 
python scripts/train_modernbert.py --quick-demo
"""

import argparse
import json
import sys
import os
import logging
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –ø–∞–ø–∫—É –≤ path
sys.path.append(str(Path(__file__).parent.parent))

from models.modernbert_classifier import ModernBERTClassifier, TrainingConfig, create_sample_data

logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)


def load_data_from_file(file_path: str):
    """–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ñ–∞–π–ª–∞"""
    if not os.path.exists(file_path):
        raise FileNotFoundError(f"–§–∞–π–ª {file_path} –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    with open(file_path, 'r', encoding='utf-8') as f:
        data = json.load(f)
    
    texts = data.get('texts', [])
    labels = data.get('labels', [])
    
    if len(texts) != len(labels):
        raise ValueError("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–µ–∫—Å—Ç–æ–≤ –∏ –º–µ—Ç–æ–∫ –¥–æ–ª–∂–Ω–æ —Å–æ–≤–ø–∞–¥–∞—Ç—å")
    
    return texts, labels


def create_config_from_args(args):
    """–°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏"""
    config = TrainingConfig()
    
    if args.model_name:
        config.model_name = args.model_name
    if args.num_labels:
        config.num_labels = args.num_labels
    if args.max_length:
        config.max_length = args.max_length
    if args.batch_size:
        config.batch_size = args.batch_size
    if args.learning_rate:
        config.learning_rate = args.learning_rate
    if args.num_epochs:
        config.num_epochs = args.num_epochs
    if args.output_dir:
        config.output_dir = args.output_dir
    
    return config


def run_quick_demo():
    """–ó–∞–ø—É—Å–∫ –±—ã—Å—Ç—Ä–æ–≥–æ –¥–µ–º–æ —Å –ø—Ä–∏–º–µ—Ä–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏"""
    logger.info("üöÄ –ó–∞–ø—É—Å–∫–∞—é –±—ã—Å—Ç—Ä–æ–µ –¥–µ–º–æ ModernBERT –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞")
    
    # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –¥–ª—è –¥–µ–º–æ
    config = TrainingConfig(
        model_name="answerdotai/ModernBERT-base",
        num_epochs=1,  # –ë—ã—Å—Ç—Ä–æ–µ –æ–±—É—á–µ–Ω–∏–µ –¥–ª—è –¥–µ–º–æ
        batch_size=2,  # –û—á–µ–Ω—å –º–∞–ª–µ–Ω—å–∫–∏–π batch size –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
        max_length=512,  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É –¥–ª—è –¥–µ–º–æ
        output_dir="./models/modernbert_demo",
        learning_rate=5e-5
    )
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä
    classifier = ModernBERTClassifier(config)
    
    # –°–æ–∑–¥–∞–µ–º –¥–µ–º–æ –¥–∞–Ω–Ω—ã–µ
    texts, labels = create_sample_data()
    logger.info(f"–°–æ–∑–¥–∞–Ω–æ {len(texts)} –ø—Ä–∏–º–µ—Ä–æ–≤ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è")
    
    # –†–∞–∑–¥–µ–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
    split_idx = int(0.7 * len(texts))
    train_texts, val_texts = texts[:split_idx], texts[split_idx:]
    train_labels, val_labels = labels[:split_idx], labels[split_idx:]
    
    logger.info(f"–û–±—É—á–∞—é—â–∞—è –≤—ã–±–æ—Ä–∫–∞: {len(train_texts)} –ø—Ä–∏–º–µ—Ä–æ–≤")
    logger.info(f"–í–∞–ª–∏–¥–∞—Ü–∏–æ–Ω–Ω–∞—è –≤—ã–±–æ—Ä–∫–∞: {len(val_texts)} –ø—Ä–∏–º–µ—Ä–æ–≤")
    
    try:
        # –û–±—É—á–∞–µ–º –º–æ–¥–µ–ª—å
        train_result = classifier.train(train_texts, train_labels, val_texts, val_labels)
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –º–æ–¥–µ–ª—å
        test_texts = [
            "–û—Ç–ª–∏—á–Ω—ã–π —Ñ–∏–ª—å–º, –≤—Å–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥—É—é!",
            "–£–∂–∞—Å–Ω–æ–µ –∫–∏–Ω–æ, –Ω–µ —Ç—Ä–∞—Ç—å—Ç–µ –≤—Ä–µ–º—è.",
            "–ù–µ–ø–ª–æ—Ö–∞—è –∫–∞—Ä—Ç–∏–Ω–∞, –º–æ–∂–Ω–æ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å",
            "–≠—Ç–æ —à–µ–¥–µ–≤—Ä –∫–∏–Ω–µ–º–∞—Ç–æ–≥—Ä–∞—Ñ–∞!"
        ]
        
        logger.info("üîÆ –¢–µ—Å—Ç–∏—Ä—É—é –º–æ–¥–µ–ª—å –Ω–∞ –Ω–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö:")
        predictions = classifier.predict(test_texts)
        probabilities = classifier.predict(test_texts, return_probabilities=True)
        
        for i, (text, pred, probs) in enumerate(zip(test_texts, predictions, probabilities)):
            sentiment = "–ü–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–π" if pred == 1 else "–û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π"
            confidence = max(probs) * 100
            logger.info(f"  {i+1}. '{text}' -> {sentiment} (—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {confidence:.1f}%)")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–æ–¥–µ–ª—å
        classifier.save_model(config.output_dir)
        logger.info(f"‚úÖ –ú–æ–¥–µ–ª—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ {config.output_dir}")
        
        return classifier
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è –æ–±—É—á–µ–Ω–∏—è: {e}")
        raise


def main():
    parser = argparse.ArgumentParser(description="–û–±—É—á–µ–Ω–∏–µ ModernBERT –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞")
    
    parser.add_argument("--quick-demo", action="store_true", 
                       help="–ó–∞–ø—É—Å—Ç–∏—Ç—å –±—ã—Å—Ç—Ä–æ–µ –¥–µ–º–æ —Å –ø—Ä–∏–º–µ—Ä–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏")
    
    parser.add_argument("--config-file", type=str,
                       help="–ü—É—Ç—å –∫ JSON —Ñ–∞–π–ª—É —Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π")
    
    parser.add_argument("--train-data", type=str,
                       help="–ü—É—Ç—å –∫ JSON —Ñ–∞–π–ª—É —Å –æ–±—É—á–∞—é—â–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏")
    
    parser.add_argument("--val-data", type=str,
                       help="–ü—É—Ç—å –∫ JSON —Ñ–∞–π–ª—É —Å –≤–∞–ª–∏–¥–∞—Ü–∏–æ–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏")
    
    # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –º–æ–¥–µ–ª–∏
    parser.add_argument("--model-name", type=str, default="answerdotai/ModernBERT-base",
                       help="–ù–∞–∑–≤–∞–Ω–∏–µ ModernBERT –º–æ–¥–µ–ª–∏")
    
    parser.add_argument("--num-labels", type=int, default=2,
                       help="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–ª–∞—Å—Å–æ–≤ –¥–ª—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏")
    
    parser.add_argument("--max-length", type=int, default=512,
                       help="–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ —Ç–æ–∫–µ–Ω–∏–∑–∞—Ü–∏–∏")
    
    # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –æ–±—É—á–µ–Ω–∏—è
    parser.add_argument("--batch-size", type=int, default=16,
                       help="–†–∞–∑–º–µ—Ä –±–∞—Ç—á–∞")
    
    parser.add_argument("--learning-rate", type=float, default=2e-5,
                       help="–°–∫–æ—Ä–æ—Å—Ç—å –æ–±—É—á–µ–Ω–∏—è")
    
    parser.add_argument("--num-epochs", type=int, default=3,
                       help="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ø–æ—Ö –æ–±—É—á–µ–Ω–∏—è")
    
    parser.add_argument("--output-dir", type=str, default="./models/modernbert_classifier",
                       help="–ü–∞–ø–∫–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –º–æ–¥–µ–ª–∏")
    
    args = parser.parse_args()
    
    if args.quick_demo:
        return run_quick_demo()
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    if args.config_file:
        with open(args.config_file, 'r', encoding='utf-8') as f:
            config_dict = json.load(f)
        config = TrainingConfig(**config_dict)
    else:
        config = create_config_from_args(args)
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä
    classifier = ModernBERTClassifier(config)
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    if args.train_data:
        train_texts, train_labels = load_data_from_file(args.train_data)
        logger.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(train_texts)} –æ–±—É—á–∞—é—â–∏—Ö –ø—Ä–∏–º–µ—Ä–æ–≤")
    else:
        logger.error("–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å --train-data –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å --quick-demo")
        return
    
    val_texts, val_labels = None, None
    if args.val_data:
        val_texts, val_labels = load_data_from_file(args.val_data)
        logger.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(val_texts)} –≤–∞–ª–∏–¥–∞—Ü–∏–æ–Ω–Ω—ã—Ö –ø—Ä–∏–º–µ—Ä–æ–≤")
    
    # –û–±—É—á–∞–µ–º –º–æ–¥–µ–ª—å
    logger.info("üöÄ –ù–∞—á–∏–Ω–∞—é –æ–±—É—á–µ–Ω–∏–µ ModernBERT –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞")
    try:
        train_result = classifier.train(train_texts, train_labels, val_texts, val_labels)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–æ–¥–µ–ª—å
        classifier.save_model(config.output_dir)
        logger.info(f"‚úÖ –û–±—É—á–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ! –ú–æ–¥–µ–ª—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ {config.output_dir}")
        
        return classifier
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è –æ–±—É—á–µ–Ω–∏—è: {e}")
        raise


if __name__ == "__main__":
    main() 